import datetime

def extraer_informacion_adicional(datos):
    info = []
    advertencias = []

    # Fecha de fabricaci√≥n
    fecha_cal = datos.get("LLB CAL", "")
    try:
        fecha_fabricacion = datetime.datetime.strptime(fecha_cal, "%Y%m%d")
        hoy = datetime.datetime.today()
        antiguedad = hoy - fecha_fabricacion
        a√±os = antiguedad.days // 365
        meses = (antiguedad.days % 365) // 30
        info.append(f"üìÖ Fecha de fabricaci√≥n: {fecha_fabricacion.date()} (hace {a√±os} a√±os y {meses} meses)")
    except:
        info.append("üìÖ Fecha de fabricaci√≥n: No disponible")

    # D√≠as desde calibraci√≥n
    dias_desde_cal = int(datos.get("LLB DIFF", 0))
    info.append(f"üïì D√≠as desde √∫ltimo calibrado: {dias_desde_cal}")
    if dias_desde_cal >= 180:
        advertencias.append("üîÅ Recomendaci√≥n: Han pasado m√°s de 6 meses desde la √∫ltima calibraci√≥n. Considera realizar una carga completa (0% a 100%).")

    # Temperatura m√°xima
    temp_max_raw = int(datos.get("mSavedBatteryMaxTemp", 0))
    temp_max = temp_max_raw / 10
    info.append(f"üî• Temp. m√°xima registrada: {temp_max:.1f} ¬∫C")
    if temp_max >= 60:
        advertencias.append("‚ö†Ô∏è Advertencia: La bater√≠a ha alcanzado temperaturas muy altas. Evita exponer el m√≥vil al sol o cargarlo mientras usas apps exigentes.")

    # Corriente m√°xima
    corriente_max = int(datos.get("mSavedBatteryMaxCurrent", 0))
    info.append(f"‚ö° Corriente m√°xima registrada: {corriente_max} mA")

    return info, advertencias
